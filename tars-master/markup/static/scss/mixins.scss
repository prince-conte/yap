// Mixins.

// Media queries



// Media queries
@mixin mq($mq-breakpoint) {
  @if map-has-key($mq-breakpoints, $mq-breakpoint) {
    $mq-device: '';
    @if $enable-mq-device == true {
      $mq-device: '-device';
    }

    $mq-range: 'min';
    @if $mq-breakpoint == nth(map-keys($mq-breakpoints), 1) {
      $mq-range: 'max';
    }

    @media all and (#{$mq-range}#{$mq-device}-width: map-get($mq-breakpoints, $mq-breakpoint)) {
      @content;
    }
  }
}

// Container
@mixin container {
  width: 100%;
  margin: {
    right: auto;
    left: auto;
  };

  @each $mq-container-width in $mq-container-widths {
    $mq: nth($mq-container-width, 1);
    $container-width: nth($mq-container-width, 2);

    @include mq($mq) {
      max-width: $container-width;
    }
  }

  @each $mq-container-indent in $mq-container-indents {
    $mq: nth($mq-container-indent, 1);
    $container-indent: nth($mq-container-indent, 2);

    @include mq($mq) {
      padding: {
        right: $container-indent;
        left:  $container-indent;
      };
    }
  }
}




// Grid
@mixin grid($main-axis: x, $justify-content: null, $align-items: null, $align-content: null) {
  display: flex;
  justify-content: $justify-content;
  align-items: $align-items;

  @if $main-axis == x {
    flex-wrap: wrap;
    align-content: $align-content;
  }

  @if $main-axis == y {
    flex-direction: column;
  }

  @each $mq-grid-gutter in $mq-grid-gutters {
    $mq: nth($mq-grid-gutter, 1);
    $grid-gutter: nth($mq-grid-gutter, 2);

    @include mq($mq) {
      margin: {
        right: half(-$grid-gutter);
        left:  half(-$grid-gutter);
      };
    }
  }
}

@mixin grid-col {
  @each $mq-grid-gutter in $mq-grid-gutters {
    $mq: nth($mq-grid-gutter, 1);
    $grid-gutter: nth($mq-grid-gutter, 2);

    @include mq($mq) {
      padding: {
        right: half($grid-gutter);
        left:  half($grid-gutter);
      };
    }
  }
}

@mixin grid-cols($cols-count, $cols-total) {
  width: $cols-count / $cols-total * 100%;
}

// Font
@mixin font($font-size, $line-height) {
  font-size: $font-size;
  line-height: strip-units($line-height) / strip-units($font-size);
}
// Font
@mixin font($font-size, $line-height) {
  font-size: $font-size;
  line-height: strip-units($line-height) / strip-units($font-size);
}

// Direct parent
@mixin direct-parent($parent-selector) {
  $current-sequences: &;
  $new-sequences: ();

  @each $sequence in $current-sequences {
    $current-selector: nth($sequence, -1);
    $prepended-selector: join($parent-selector, $current-selector);
    $new-sequence: set-nth($sequence, -1, $prepended-selector);
    $new-sequences: append($new-sequences, $new-sequence, comma);
  }

  @at-root #{$new-sequences} {
    @content;
  }
}

// Hover
@mixin hover($properties-list, $values-list, $parents-selector: '') {
  $properties-length: length($properties-list);
  $values-length: length($values-list);

  @if $properties-length == $values-length {
    .mod_no-touchevents & {
      @if $parents-selector == '' {
        &:hover,
        &.hover {
          @for $i from 1 through $properties-length {
            #{nth($properties-list, $i)}: nth($values-list, $i);
          }
        }
      } @else {
        @include direct-parent($parents-selector) {
          @for $i from 1 through $properties-length {
            #{nth($properties-list, $i)}: nth($values-list, $i);
          }
        }
      }
    }
  } @else {
    @error "The number of properties (#{$properties-list}) and values (#{$values-list}) are not equal."
  }
}

// Transition fix
@mixin transition-fix {
  @include backface-visibility(hidden);
  @include transform(translate3d(0, 0, 0));
}

// Texts
@mixin text-small {
  @include font(1.2rem, 1.5rem);
}

@mixin text-base {
  @include font(1.4rem, 2rem);
}

@mixin text-large {
  @include font(1.8rem, 2.5rem);
}


@mixin nl {
    margin: 0;
    padding: 0;
    text-indent: 0;
    list-style: none;
    list-style-position: outside;
}

@mixin cf {
    &:before,
    &:after {
        display: table;
        content: "";
    }

    &:after {
        clear: both;
    }

    .lt-ie8 & {
        zoom: 1;
    }
}

@mixin blocks-justify {
    text-align: justify;
    text-justify: newspaper;
}

// You can add your own mixins here: